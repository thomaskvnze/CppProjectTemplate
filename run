#!/bin/bash

###############################################################################
# Shell script
###############################################################################
# Shell script options
set -e

###############################################################################
# Execution environment
###############################################################################
ENV="${ENV:-}"
NAMESPACE=cpptemplate

###############################################################################
# Setup
###############################################################################

##DOC install - Install application dependencies
task_install() {
  if [[ "$OSTYPE" == "linux"* ]]; then
    sudo apt-get install gcc g++ cmake doxygen gcovr lcov llvm clang-format clang-tidy cmake-format
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    brew update
    brew install cmake clang-format gcovr lcov doxygen llvm
    pip install cmakelang
    cd external/vcpkg && git clone https://github.com/Microsoft/vcpkg.git && cd ../..
    echo "Add symlink for clang-tidy 'sudo ln -s \"/opt/homebrew/Cellar/llvm/16.0.2/bin/clang-tidy\" \"/usr/local/bin/clang-tidy\"'"
  fi
}

##############################################################################
# Build
###############################################################################

##DOC clean_build - clean up build folder
task_clean_build() {
  rm -rf build
	mkdir build
}

##DOC build - Build application to deploy
task_build() {
  echo "build"
}

###############################################################################
# Run
###############################################################################

##DOC start - Start local development environment
task_start() {
  echo "run"
}

###############################################################################
# Test
###############################################################################

##DOC test_unit - Run unit tests
task_test_unit() {
  echo "test_unit"
}

##DOC test_integration - Run integration tests
task_test_integration() {
  echo "test_integration"
}

##DOC test_api - Run api tests
task_test_api() {
  echo "test_api"
}

##DOC test_functional - Run functional tests
task_test_functional() {
  echo "test_functional"
}

##DOC quality_check - Static check (lint) and testing
task_quality_check() {
  task_test_unit
  task_test_integration
  task_test_api
  task_test_functional
}

###############################################################################
# Helper functions
###############################################################################

##DOC help - Print cli usage message
help() {
  echo ""
  echo "ENV: test | stage | prod | ''"
  echo ""
  echo "Commands:"
  grep -e "^##DOC" <"$(basename "$0")" | sed "s/^##DOC \(.*\)/  \1/"

  exit 1
}

## cli main function
main() {
  CMD=${1:-}
  shift || true

  pushd "$DIR" >/dev/null

  if type "task_${CMD}" &>/dev/null; then
    "task_${CMD}" "$@"
  else
    help
  fi

  popd >/dev/null
}

main "$@"